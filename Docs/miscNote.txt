/*
 *
 * This is miscellaneous notes during dev & debugging
 *
 */

 <2024.09.12>
    类似这种报错
    ---
    error: execv(C:\Users\decka\Projects\NovlEngine\Build\build\release\windows_x64\Novl Editor.exe ) failed(-1073741819)
    ---
    这个报错码一般是指针指向的东西有问题...比如在Runtime init之前就调用了它里面的东西，或者在Log init之前就打log了之类的

<2024.09.14>
    尝试了Window System放在Runtime而ImGui的所有都放在Editor，但是ImGui初始化的时候需要一个GLFWwindow*，这个从Runtime实例->WindowsWindow实例->get到GLFWwindow*，并且cast成一个void*传到Editor，再cast回GLFWwindow*
    本来以为这样OK的，但是不行，会报错：
    ---
    Assertion failed: bd->PrevWndProc != nullptr, file imgui_impl_glfw.cpp, line 636
    error: execv(C:\Users\decka\Projects\NovlEngine\Build\build\release\windows_x64\Novl Editor.exe ) failed(-1073740791)
    ---
    整了一下午没整明白怎么回事，放弃了，其实print出来两边指针指向的地址都是一致的，但是仍然不行
    决定把ImGui的初始化也放在Runtime，就是在Runtime抽象出来一个UI类，在Editor实现一个子类吧

<2024.09.20>
    上述问题还没解决，但好像使用dll的时候exe能否使用dll在堆上分配的内存取决于内存管理策略，以及要dll和exe使用相同的编译器选项，链接到相同的CRT(/MD or /MDd)
    总之就是在一个dll中分配的内存不应该在另一个模块中访问或释放之类的，因为相同的指针指向的物理地址不是同一块
    属于跨dll边界问题的一种，指针可能失效

<2024.09.23>
    解决方式是把ImGui init需要glfw window的部分放在runtime中了，看了一下其他把Runtime和Editor分开的引擎也是这样做（Piccolo和ZXEngine），有点丑陋，但是能run
    下一步最好把novl runtime的数据分离出来到global context里，runtime中是逻辑，global context是数据，避免耦合住了

<2024.09.24>
    非常幽默，非常小丑，发现如果glfw window init的部分放在runtime中，editor中就get不到imgui的context了
    又做了一个尝试：把imgui render backend的init放在runtime中，把context相关的放在editor中，但是render backend也需要imgui的context，找不到context了
    好的，这就是dll跨边界的大坑，解决方式就是不用dll
    从此改为static lib，已老实，编出来exe大点就大点吧